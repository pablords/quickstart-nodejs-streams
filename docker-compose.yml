version: "3"

services:
  db-stream:
    image: mysql:5.7
    restart: always
    env_file: ./.env
    container_name: db-stream
    networks:
      - monitor-net
    ports:
      - 3307:3306
    volumes:
      - db-stream:/var/lib/mysql
      - ./table.sql:/docker-entrypoint-initdb.d/table.sql
    command: --innodb_use_native_aio=0 --socket=/tmp/mysql.sock --bind_address=0.0.0.0

  prometheus:
    image: prom/prometheus:v2.17.1
    container_name: prometheus
    volumes:
      - ./infra/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - 9090:9090
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:6.7.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  app:
    container_name: app
    env_file: ./.env
    depends_on:
      - db-stream
    image: app-streams
    build: .
    volumes:
      - ./:/home/node/app
    ports:
      - 3001:3001
    networks:
      - monitor-net
    command: /bin/bash -c npm run dev

networks:
  monitor-net:
    driver: bridge
volumes:
  db-stream: {}
  prometheus_data: {}
  grafana_data: {}

